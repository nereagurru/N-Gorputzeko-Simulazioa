# -*- coding: utf-8 -*-
"""
Created on Mon Mar 15 12:40:21 2021

@author: nerea
"""
#Bertsio hau 2Dtan egin da

import numpy as np
import random
import math
import sys

def talkaExis(D, N, x, y):
    """
       Talka gertatuko den partikula bikoteak detektatu eta modu aleatorio
       batean partikula bikoteak ordenatu.
       D partikula baten diametroa
       N partikula kopurua
       R N*N numpy objektua partikula bikoteen distantzia adierazten duena
       output1: talka gertatuko den edo ez adieraziko duen boolearra
       output2: tuplaz osatutako lista, [(part1, part2), (part3, part5),....]
       
    """
    #Diagonaleko elementuen arteko talka kontuan ez hartzeko, ezta talka bakoitza
    #bi aldiz ere
    eps = math.pow(10, -2)
    Rlagun = dist(N, x, y) + (D + eps)*np.tril(np.ones([N, N])) 


    talka = Rlagun < D  #talka gertatuko bada True gorde. 
    #talkaren eragina kalkulatzeko modua aleatorioa izan behar da.
    #Hmen posible ahal da paralelizazioa sortzea? grabitatea kalkulatzea alde 
    #batetik behar dutenentzat, eta besteentzat talkak
    
    result = np.where(talka==True)
    listOfCoordinates = list(zip(result[0], result[1]))
    random.shuffle(listOfCoordinates)
    return talka, listOfCoordinates


def dist(N, x, y):
    xij = np.transpose(np.ones([N, N])*x) - np.ones([N, N])*x  # xi - xj
    yij = np.transpose(np.ones([N, N])*y) - np.ones([N, N])*y
    R = np.power(np.power(xij, 2) + np.power(yij, 2), 0.5)
    return R


def talkaExekutatu(N, n, listOfCoor, x, y, vx, vy):
    """
       2D-tan talka 
    """
    for i in range(0, len(listOfCoor)):
        theta = math.atan((y[listOfCoor[i][0]] - y[listOfCoor[i][1]])/(x[listOfCoor[i][0]] - x[listOfCoor[i][1]]))

        matrix = np.array(([1, 1, 0, 0],[0, 0, 1, 1],
                           [-math.sin(theta), math.sin(theta),
                            math.cos(theta), -math.cos(theta)],
                           [math.cos(theta), -math.cos(theta),
                            math.sin(theta), -math.sin(theta)]))
        b = np.array(([vx[listOfCoor[i][0]] + vx[listOfCoor[i][1]], 
                       vy[listOfCoor[i][0]] + vy[listOfCoor[i][1]], 
                       -(vx[listOfCoor[i][0]] - vx[listOfCoor[i][1]])*math.sin(theta) + (vy[listOfCoor[i][0]] - vy[listOfCoor[i][1]])*math.cos(theta),
                       -n*(vx[listOfCoor[i][0]] - vx[listOfCoor[i][1]])*math.cos(theta) - n*(vy[listOfCoor[i][0]] - vy[listOfCoor[i][1]])*math.sin(theta)]))
        sol = np.linalg.solve(matrix, b)
        vx = sol[0:N]
        vy = sol[N:2*N]
    return vx, vy


N = 2
x = np.array([-1, 1])
y = np.array([-1, 1])
vx = np.array([1, -1])
vy = np.array([1, -2])
talka, emaitza = talkaExis(3, N, x, y)
print("Hasieran :")
print("vx = " + str(vx))
print("vy = " + str(vy))
vx, vy = talkaExekutatu(N, 0.3, emaitza, x, y, vx, vy)
print("Talka eta gero :")
print("vx = " + str(vx))
print("vy = " + str(vy))
